/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stream-parser";
exports.ids = ["vendor-chunks/stream-parser"];
exports.modules = {

/***/ "(action-browser)/./node_modules/stream-parser/index.js":
/*!*********************************************!*\
  !*** ./node_modules/stream-parser/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar debug = __webpack_require__(/*! debug */ \"(action-browser)/./node_modules/debug/src/index.js\")('stream-parser');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Parser;\n\n/**\n * Parser states.\n */\n\nvar INIT        = -1;\nvar BUFFERING   = 0;\nvar SKIPPING    = 1;\nvar PASSTHROUGH = 2;\n\n/**\n * The `Parser` stream mixin works with either `Writable` or `Transform` stream\n * instances/subclasses. Provides a convenient generic \"parsing\" API:\n *\n *   _bytes(n, cb) - buffers \"n\" bytes and then calls \"cb\" with the \"chunk\"\n *   _skipBytes(n, cb) - skips \"n\" bytes and then calls \"cb\" when done\n *\n * If you extend a `Transform` stream, then the `_passthrough()` function is also\n * added:\n *\n *   _passthrough(n, cb) - passes through \"n\" bytes untouched and then calls \"cb\"\n *\n * @param {Stream} stream Transform or Writable stream instance to extend\n * @api public\n */\n\nfunction Parser (stream) {\n  var isTransform = stream && 'function' == typeof stream._transform;\n  var isWritable = stream && 'function' == typeof stream._write;\n\n  if (!isTransform && !isWritable) throw new Error('must pass a Writable or Transform stream in');\n  debug('extending Parser into stream');\n\n  // Transform streams and Writable streams get `_bytes()` and `_skipBytes()`\n  stream._bytes = _bytes;\n  stream._skipBytes = _skipBytes;\n\n  // only Transform streams get the `_passthrough()` function\n  if (isTransform) stream._passthrough = _passthrough;\n\n  // take control of the streams2 callback functions for this stream\n  if (isTransform) {\n    stream._transform = transform;\n  } else {\n    stream._write = write;\n  }\n}\n\nfunction init (stream) {\n  debug('initializing parser stream');\n\n  // number of bytes left to parser for the next \"chunk\"\n  stream._parserBytesLeft = 0;\n\n  // array of Buffer instances that make up the next \"chunk\"\n  stream._parserBuffers = [];\n\n  // number of bytes parsed so far for the next \"chunk\"\n  stream._parserBuffered = 0;\n\n  // flag that keeps track of if what the parser should do with bytes received\n  stream._parserState = INIT;\n\n  // the callback for the next \"chunk\"\n  stream._parserCallback = null;\n\n  // XXX: backwards compat with the old Transform API... remove at some point..\n  if ('function' == typeof stream.push) {\n    stream._parserOutput = stream.push.bind(stream);\n  }\n\n  stream._parserInit = true;\n}\n\n/**\n * Buffers `n` bytes and then invokes `fn` once that amount has been collected.\n *\n * @param {Number} n the number of bytes to buffer\n * @param {Function} fn callback function to invoke when `n` bytes are buffered\n * @api public\n */\n\nfunction _bytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(isFinite(n) && n > 0, 'can only buffer a finite number of bytes > 0, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('buffering %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = BUFFERING;\n}\n\n/**\n * Skips over the next `n` bytes, then invokes `fn` once that amount has\n * been discarded.\n *\n * @param {Number} n the number of bytes to discard\n * @param {Function} fn callback function to invoke when `n` bytes have been skipped\n * @api public\n */\n\nfunction _skipBytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(n > 0, 'can only skip > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('skipping %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = SKIPPING;\n}\n\n/**\n * Passes through `n` bytes to the readable side of this stream untouched,\n * then invokes `fn` once that amount has been passed through.\n *\n * @param {Number} n the number of bytes to pass through\n * @param {Function} fn callback function to invoke when `n` bytes have passed through\n * @api public\n */\n\nfunction _passthrough (n, fn) {\n  assert(!this._parserCallback, 'There is already a \"callback\" set!');\n  assert(n > 0, 'can only pass through > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('passing through %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = PASSTHROUGH;\n}\n\n/**\n * The `_write()` callback function implementation.\n *\n * @api private\n */\n\nfunction write (chunk, encoding, fn) {\n  if (!this._parserInit) init(this);\n  debug('write(%o bytes)', chunk.length);\n\n  // XXX: old Writable stream API compat... remove at some point...\n  if ('function' == typeof encoding) fn = encoding;\n\n  data(this, chunk, null, fn);\n}\n\n/**\n * The `_transform()` callback function implementation.\n *\n * @api private\n */\n\n\nfunction transform (chunk, output, fn) {\n  if (!this._parserInit) init(this);\n  debug('transform(%o bytes)', chunk.length);\n\n  // XXX: old Transform stream API compat... remove at some point...\n  if ('function' != typeof output) {\n    output = this._parserOutput;\n  }\n\n  data(this, chunk, output, fn);\n}\n\n/**\n * The internal buffering/passthrough logic...\n *\n * This `_data` function get's \"trampolined\" to prevent stack overflows for tight\n * loops. This technique requires us to return a \"thunk\" function for any\n * synchronous action. Async stuff breaks the trampoline, but that's ok since it's\n * working with a new stack at that point anyway.\n *\n * @api private\n */\n\nfunction _data (stream, chunk, output, fn) {\n  if (stream._parserBytesLeft <= 0) {\n    return fn(new Error('got data but not currently parsing anything'));\n  }\n\n  if (chunk.length <= stream._parserBytesLeft) {\n    // small buffer fits within the \"_parserBytesLeft\" window\n    return function () {\n      return process(stream, chunk, output, fn);\n    };\n  } else {\n    // large buffer needs to be sliced on \"_parserBytesLeft\" and processed\n    return function () {\n      var b = chunk.slice(0, stream._parserBytesLeft);\n      return process(stream, b, output, function (err) {\n        if (err) return fn(err);\n        if (chunk.length > b.length) {\n          return function () {\n            return _data(stream, chunk.slice(b.length), output, fn);\n          };\n        }\n      });\n    };\n  }\n}\n\n/**\n * The internal `process` function gets called by the `data` function when\n * something \"interesting\" happens. This function takes care of buffering the\n * bytes when buffering, passing through the bytes when doing that, and invoking\n * the user callback when the number of bytes has been reached.\n *\n * @api private\n */\n\nfunction process (stream, chunk, output, fn) {\n  stream._parserBytesLeft -= chunk.length;\n  debug('%o bytes left for stream piece', stream._parserBytesLeft);\n\n  if (stream._parserState === BUFFERING) {\n    // buffer\n    stream._parserBuffers.push(chunk);\n    stream._parserBuffered += chunk.length;\n  } else if (stream._parserState === PASSTHROUGH) {\n    // passthrough\n    output(chunk);\n  }\n  // don't need to do anything for the SKIPPING case\n\n  if (0 === stream._parserBytesLeft) {\n    // done with stream \"piece\", invoke the callback\n    var cb = stream._parserCallback;\n    if (cb && stream._parserState === BUFFERING && stream._parserBuffers.length > 1) {\n      chunk = Buffer.concat(stream._parserBuffers, stream._parserBuffered);\n    }\n    if (stream._parserState !== BUFFERING) {\n      chunk = null;\n    }\n    stream._parserCallback = null;\n    stream._parserBuffered = 0;\n    stream._parserState = INIT;\n    stream._parserBuffers.splice(0); // empty\n\n    if (cb) {\n      var args = [];\n      if (chunk) {\n        // buffered\n        args.push(chunk);\n      } else {\n        // passthrough\n      }\n      if (output) {\n        // on a Transform stream, has \"output\" function\n        args.push(output);\n      }\n      var async = cb.length > args.length;\n      if (async) {\n        args.push(trampoline(fn));\n      }\n      // invoke cb\n      var rtn = cb.apply(stream, args);\n      if (!async || fn === rtn) return fn;\n    }\n  } else {\n    // need more bytes\n    return fn;\n  }\n}\n\nvar data = trampoline(_data);\n\n/**\n * Generic thunk-based \"trampoline\" helper function.\n *\n * @param {Function} input function\n * @return {Function} \"trampolined\" function\n * @api private\n */\n\nfunction trampoline (fn) {\n  return function () {\n    var result = fn.apply(this, arguments);\n\n    while ('function' == typeof result) {\n      result = result();\n    }\n\n    return result;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-parser/index.js\n");

/***/ })

};
;